@startuml Silence Radio
package "controleurs" {
    class ApplicationRadio {
        + void start(Stage stagePrincipal)
        + {static} void main
    }
    
    class ControleurEnvoi {
        - {static} void envoyer(Byte[] bytes)
    }
    
    note top of ControleurReception : Le corps de cette classe reste à déterminer
    class ControleurReception{
        + void ControleurReception()
    }
}

package "vue" {
    note top of ControleurVueEmetteur : Le corps de cette classe reste à déterminer
    class ControleurVueEmetteur {
        + void ControleurVueEmetteur()
    }

    note top of ControleurVueRecepteur : Le corps de cette classe reste à déterminer
    class ControleurVueRecepteur {
        + void ControleurVueRecepteur()
    }

    note top of ControleurVueMenu : Le corps de cette classe reste à déterminer
    class ControleurVueMenu {
        + void ControleurVueMenu()
    }
}

package "modeles.emetteur" {
    class RepresentationBinaire {
        - octets : List<OctetBinaire>
        + void RepresentationBinaire(byte[] bytes)
        + void RepresentationBinaire(OctetBinaire[] bytes)
        + byte representationByte()
        - OctetBinaire byteEnBinaire(byte b)
    }

    class OctetBinaire {
        - bits : byte[]
        + OctetBinaire(byte b)
        - void calculerBits(byte b)
        + byte[] getBits()
        - {static} boolean validerByte(byte b)
        + String toString()
        + boolean equals(Object obj)
    }

    class GenerateurSon {
        + octets : List<OctetBinaire>
        + notes : List<Note>
        + void GenerateurSon(List<OctetBinaire> octets)
        - Note genererNote(byte b)
        - void genererNotes()
    }

    class Note {
        - numeroNote : int
        - velocite : int
        + void Note(int numeroNote, int velocite)
    }

    class LecteurSon {
        + void LecteurSon(List<Note>)
        + void jouerSon(Note note)
        + void jouerSons()
    }
}

package "modeles.receveur" {
    class EcouteurSignaux{
        - enEcoute : boolean
        + void EcouteurSignaux()
        + void ecouter()
        + void arreterEcouter()
    }

    class Signal{
        - valeur : ValeurSignal
        + void Signal(ValeurSignal signal)
        + byte obtenirValeurBit()
    }

    enum ValeurSignal{
        HAUT
        BAS
    }
}

package "passerelle" {
    class PasserelleFichier{
        + void PasserelleFichier()
        + {static} byte[] lireOctets(File fichier)
        + {static} void ecrireOctets(byte[] octets)
        + {static} void ecrireOctets(RepresentationBinaire binaire)
        + {static} File obtenirFichier(String chemin)
    }
}

package "tests" {

}

ApplicationRadio --> ControleurEnvoi
ControleurEnvoi --> PasserelleFichier
ControleurEnvoi --> RepresentationBinaire
ControleurEnvoi --> GenerateurSon
ControleurEnvoi --> LecteurSon
LecteurSon --> Note
GenerateurSon --> Note
GenerateurSon --> OctetBinaire
RepresentationBinaire --> OctetBinaire

ControleurReception --> PasserelleFichier
ControleurReception --> EcouteurSignaux
EcouteurSignaux --> OctetBinaire
EcouteurSignaux --> Signal
Signal --> ValeurSignal
@enduml