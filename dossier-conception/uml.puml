@startuml Silence Radio
package "controleurs" {
    class ApplicationRadio {
    	- scene : Scene
    	- stage : Stage
    	- vueEmetteur : ControleurVueEmetteur
    	- vueMenu : ControleurVueMenu
        + void start(Stage stagePrincipal)
        + {static} void main()
        - void showVueMenu(Stage stage)
        + void showVueEmetteur()
        + Stage getStage()
    }
    
    class ControleurEnvoi {
        - {static} void envoyer(Byte[] bytes)
    }
    
    note top of ControleurReception : Le corps de cette classe reste à déterminer
    class ControleurReception{
        + void ControleurReception()
    }
}

package "vue" {
    class ControleurVueEmetteur {
    	- borderPaneRoot : BorderPane
    	- btnSelectionner : Button
    	- btnEnvoyer : Button
    	- slider : Slider
    	- freqLabel : Label
    	- sliderLabel : Label
        - application : ApplicationRadio = null
        + {static} final ADRESSE_VUE_EMETTEUR : String = "/vues/Vue_Emetteur.fxml"
        + void setApplication(ApplicationRadio application)
        + BorderPane getBorderPaneRoot()
        - void clickedBtnEnvoyer(ActionEvent event)
        - void clickedBtnSelect(ActionEvent event)
        + void bindSlider()
    }

    note top of ControleurVueRecepteur : Le corps de cette classe reste à déterminer
    class ControleurVueRecepteur {
        + void ControleurVueRecepteur()
    }

    class ControleurVueMenu {
        - vboxRoot : VBox
        - btnEmettre : Button
        - btnReception : Button
        - application : ApplicationRadio = null
        + {static} final ADRESSE_VUE_MENU : String = "/vues/Vue_Menu.fxml"
        + void setApplication(ApplicationRadio application)
        + VBox getVboxRoot()
        - void clickedBtnEmettre(ActionEvent event)
        - void clickedBtnReception(ActionEvent event)
    }
}

package "modeles.emetteur" {
    class RepresentationBinaire {
        - octets : OctetBinaire[]
        - octetCourant : int
        + RepresentationBinaire(byte[] bytes)
        + OctetBinaire[] getOctets()
        + boolean hasNext()
        + OctetBinaire next()
        + Iterator<OctetBinaire> iterator()
        - {static} boolean validerOctets(byte[] octets)
    }

    class OctetBinaire {
        - bits : byte[]
        + OctetBinaire(byte b)
        - void calculerBits(byte b)
        + byte[] getBits()
        - {static} boolean validerByte(byte b)
        + String toString()
        + boolean equals(Object obj)
    }

    class GenerateurSon {
        - repr : RepresentationBinaire
        - donneesSon0 : byte[]
        - donneesSon1 : byte[]
        + GenerateurSon(RepresentationBinaire repr, float dureeEnSec)
        + void calculerSonsPourBits(float dureeEnSec)
        + byte[][] getDonneesSon()
        + {static} boolean validerRepresentation(RepresentationBinaire repr)
        + {static} boolean validerDureeEnSec(float duree)
    }

    class LecteurSon {
        - donneesSons : byte[][]
        - af : AudioFormat
        - sdl : SourceDataLine
        - dureeEnSec : float
        + LecteurSon(byte[][] donneesSons, float dureeEnSec)
        + void lireSons()
        - void creerAudioFormat()
        - void creerSourceDataLine()
        - void preparerDataLineAEnvoi()
        - void fermerDataLine()
        + {static} boolean validerDonneesSon(byte[][] donnees)
        + {static} boolean validerDuree(float duree)
    }
}

package "modeles.receveur" {
    class EcouteurSignaux{
        - enEcoute : boolean
        + void EcouteurSignaux()
        + void ecouter()
        + void arreterEcouter()
    }

    class Signal{
        - valeur : ValeurSignal
        + void Signal(ValeurSignal signal)
        + byte obtenirValeurBit()
    }

    enum ValeurSignal{
        HAUT
        BAS
    }
}

package "passerelle" {
    class PasserelleFichier{
        + {static} byte[] lireOctets(File fichier)
        + {static} void ecrireOctets(byte[] octets)
        + {static} void ecrireOctets(RepresentationBinaire binaire)
        + {static} File obtenirFichier(String chemin)
    }
}

package "tests" {
	class TestGenerateurSon {
		+ {static} void setUp()
		+ void testGenerateurSon()
		+ void testGenerateurSonInvalide()
		+ void testCalculerSonsPourBits()
		+ void testGetDonneesSon()
	}
	
	class TestLecteurSon {
		+ void testLecteurSon()
		+ void testLecteurSonInvalide()
		+ void testValiderDonneesSon()
		+ void testValiderDuree()
	}

    class TestOctetBinaire {
        ob : OctetBinaire
        + void testOctetBinaire()
        + void testOctetBinaireInvalide()
        + void testCalculerBits()
        + void testEquals()
        + void testToString()
    }

    class TestPasserelleFichier {
        + void testLireFichier()
    }

    class TestRepresentationBinaire {
        rb : RepresentationBinaire
        octets : byte[] = {0, 1, 2, 3};
        + void testRepresentationBinaire()
        + void testRepresentationBinaireInvalide()
        + void testGetOctets()
        + void testIterator()
    }

    class TestSuite {
    }
}

interface "Iterable<OctetBinaire>" as iterableOB {
    + OctetBinaire next()
    + boolean hasNext()
}
interface "Iterator<OctetBinaire>" as iteratorOB {
    + Iterator<OctetBinaire> iterator()
}
interface "Iterable<Byte>" as iterableBY {
    + Byte next()
    + boolean hasNext()
}
interface "Iterator<Byte>" as iteratorBY {
    + Iterator<Byte> iterator()
}

ApplicationRadio --> ControleurEnvoi
ControleurEnvoi --> PasserelleFichier
ControleurEnvoi --> RepresentationBinaire

OctetBinaire --|> iterableBY
OctetBinaire --|> iteratorBY


RepresentationBinaire --> OctetBinaire
RepresentationBinaire --|> iterableOB
RepresentationBinaire --|> iteratorOB

GenerateurSon --> RepresentationBinaire
GenerateurSon --> OctetBinaire

LecteurSon --> GenerateurSon

ControleurReception --> PasserelleFichier
ControleurReception --> EcouteurSignaux

EcouteurSignaux --> OctetBinaire
EcouteurSignaux --> Signal

Signal --> ValeurSignal

TestGenerateurSon --> GenerateurSon
TestLecteurSon --> LecteurSon

TestOctetBinaire --> OctetBinaire
TestPasserelleFichier --> PasserelleFichier
TestRepresentationBinaire --> RepresentationBinaire
@enduml