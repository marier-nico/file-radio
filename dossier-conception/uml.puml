@startuml Silence Radio
package "controleurs" {
    class ApplicationRadio {
        + void start(Stage stagePrincipal)
        + {static} void main
    }
    
    class ControleurEnvoi {
        - {static} void envoyer(Byte[] bytes)
    }
    
    note top of ControleurReception : Le corps de cette classe reste à déterminer
    class ControleurReception{
        + void ControleurReception()
    }
}

package "vue" {
    note top of ControleurVueEmetteur : Le corps de cette classe reste à déterminer
    class ControleurVueEmetteur {
        + void ControleurVueEmetteur()
    }

    note top of ControleurVueRecepteur : Le corps de cette classe reste à déterminer
    class ControleurVueRecepteur {
        + void ControleurVueRecepteur()
    }

    note top of ControleurVueMenu : Le corps de cette classe reste à déterminer
    class ControleurVueMenu {
        + void ControleurVueMenu()
    }
}

package "modeles.emetteur" {
    class RepresentationBinaire {
        - octets : OctetBinaire[]
        - octetCourant : int
        + RepresentationBinaire(byte[] bytes)
        + OctetBinaire[] getOctets()
        + boolean hasNext()
        + OctetBinaire next()
        + Iterator<OctetBinaire> iterator()
        - {static} boolean validerOctets(byte[] octets)
    }

    class OctetBinaire {
        - bits : byte[]
        + OctetBinaire(byte b)
        - void calculerBits(byte b)
        + byte[] getBits()
        - {static} boolean validerByte(byte b)
        + String toString()
        + boolean equals(Object obj)
    }

    class GenerateurSon {
        + octets : List<OctetBinaire>
        + notes : List<Note>
        + void GenerateurSon(List<OctetBinaire> octets)
        - Note genererNote(byte b)
        - void genererNotes()
    }

    class Note {
        - numeroNote : int
        - velocite : int
        + void Note(int numeroNote, int velocite)
    }

    class LecteurSon {
        + void LecteurSon(List<Note>)
        + void jouerSon(Note note)
        + void jouerSons()
    }
}

package "modeles.receveur" {
    class EcouteurSignaux{
        - enEcoute : boolean
        + void EcouteurSignaux()
        + void ecouter()
        + void arreterEcouter()
    }

    class Signal{
        - valeur : ValeurSignal
        + void Signal(ValeurSignal signal)
        + byte obtenirValeurBit()
    }

    enum ValeurSignal{
        HAUT
        BAS
    }
}

package "passerelle" {
    class PasserelleFichier{
        + {static} byte[] lireOctets(File fichier)
        + {static} void ecrireOctets(byte[] octets)
        + {static} void ecrireOctets(RepresentationBinaire binaire)
        + {static} File obtenirFichier(String chemin)
    }
}

package "tests" {
    class TestOctetBinaire {
        ob : OctetBinaire
        + void testOctetBinaire()
        + void testOctetBinaireInvalide()
        + void testCalculerBits()
        + void testEquals()
        + void testToString()
    }

    class TestPasserelleFichier {
        + void testLireFichier()
    }

    class TestRepresentationBinaire {
        rb : RepresentationBinaire
        octets : byte[] = {0, 1, 2, 3};
        + void testRepresentationBinaire()
        + void testRepresentationBinaireInvalide()
        + void testGetOctets()
        + void testIterator()
    }

    class TestSuite {
    }
}

interface Iterable<OctetBinaire> {
    + OctetBinaire next()
    + boolean hasNext()
}
interface Iterator<OctetBinaire> {
    + Iterator<OctetBinaire> iterator()
}

ApplicationRadio --> ControleurEnvoi
ControleurEnvoi --> PasserelleFichier
ControleurEnvoi --> RepresentationBinaire
ControleurEnvoi --> GenerateurSon
ControleurEnvoi --> LecteurSon

LecteurSon --> Note

GenerateurSon --> Note
GenerateurSon --> OctetBinaire

RepresentationBinaire --> OctetBinaire
RepresentationBinaire --|> Iterable
RepresentationBinaire --|> Iterator

ControleurReception --> PasserelleFichier
ControleurReception --> EcouteurSignaux

EcouteurSignaux --> OctetBinaire
EcouteurSignaux --> Signal

Signal --> ValeurSignal

TestOctetBinaire --> OctetBinaire
TestPasserelleFichier --> PasserelleFichier
TestRepresentationBinaire --> RepresentationBinaire
@enduml